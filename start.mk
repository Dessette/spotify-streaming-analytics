# Makefile - Kolay kullanƒ±m i√ßin
.PHONY: help start stop restart clean install dashboard producer consumer logs status

help:  ## Bu yardƒ±m mesajƒ±nƒ± g√∂ster
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install:  ## Python gereksinimlerini y√ºkle
	pip install -r requirements.txt
	pip install jupyter

start:  ## T√ºm sistemi ba≈ülat
	chmod +x run.sh && ./run.sh

stop:  ## T√ºm sistemi durdur
	chmod +x stop.sh && ./stop.sh

restart: stop start  ## Sistemi yeniden ba≈ülat

clean:  ## Docker volumes'larƒ± da temizle
	docker-compose down -v
	docker system prune -af

dashboard:  ## Sadece dashboard'u ba≈ülat
	python interactive_dashboard.py

producer:  ## Sadece Kafka producer'ƒ± ba≈ülat
	python kafka_producer.py

consumer:  ## Sadece Spark consumer'ƒ± ba≈ülat
	python spark_streaming_consumer.py

logs:  ## Docker container loglarƒ±nƒ± g√∂ster
	docker-compose logs -f

status:  ## Sistem durumunu kontrol et
	@echo "üîç Sistem Durumu:"
	@echo "Docker Containers:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "Kafka Topics:"
	@docker exec kafka kafka-topics --list --bootstrap-server localhost:9092 2>/dev/null || echo "Kafka hen√ºz hazƒ±r deƒüil"

test:  ## Sistem testini √ßalƒ±≈ütƒ±r
	@echo "üß™ Sistem testi ba≈ülƒ±yor..."
	@echo "1. Kafka baƒülantƒ±sƒ± test ediliyor..."
	@docker exec kafka kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null && echo "‚úÖ Kafka OK" || echo "‚ùå Kafka FAIL"
	@echo "2. Spark baƒülantƒ±sƒ± test ediliyor..."
	@curl -s http://localhost:8081 > /dev/null && echo "‚úÖ Spark OK" || echo "‚ùå Spark FAIL"
	@echo "3. Kafka UI test ediliyor..."
	@curl -s http://localhost:8080 > /dev/null && echo "‚úÖ Kafka UI OK" || echo "‚ùå Kafka UI FAIL"

# Default target
.DEFAULT_GOAL := help